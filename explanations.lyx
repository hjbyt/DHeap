#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part*
Analysis
\end_layout

\begin_layout Section*
Part I
\end_layout

\begin_layout Subsection*
Basis
\end_layout

\begin_layout Standard
\begin_inset Formula $n$
\end_inset

 - size of the heap, 
\begin_inset Formula $d$
\end_inset

 - heap arity, 
\begin_inset Formula $h$
\end_inset

 - height of the heap.
\begin_inset Newline newline
\end_inset


\begin_inset Formula $d\geq2$
\end_inset

 is assumed.
 For 
\begin_inset Formula $d=1$
\end_inset

 the heap is degenerated, and the operations will take 
\begin_inset Formula $\Theta(n^{2})$
\end_inset

 at the worst case.
\begin_inset Newline newline
\end_inset

The amount of items in depth 
\begin_inset Formula $k$
\end_inset

 is at most 
\begin_inset Formula $d^{k}$
\end_inset

.
 Therefore:
\begin_inset Formula 
\begin{eqnarray*}
\sum_{k=1}^{h-1}d^{k} & \leq & n\Rightarrow\frac{d^{h}-1}{d-1}\leq n\Rightarrow\frac{d^{h}-1}{d}\leq n\Rightarrow d^{h}\leq nd+1\Rightarrow\\
h & \leq & \log_{d}(nd+1)\leq\log_{d}(2nd)=\log_{d}(2)+\log_{d}(n)+1\leq\log_{d}(n)+2
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Subsection*
Analysis of heapifyDown
\end_layout

\begin_layout Standard
It takes exactly 
\begin_inset Formula $d-1$
\end_inset

 comparisons to find the minimum child of a node, and 
\begin_inset Formula $1$
\end_inset

 comparison to determine if the current node should be swapped with it's
 minimum child.
 Therefore 
\begin_inset Formula $d$
\end_inset

 comparisons are done at each iteration, and there are at most 
\begin_inset Formula $k$
\end_inset

 iterations for a node at height 
\begin_inset Formula $k$
\end_inset

.
 Therefore for a call on a node of height 
\begin_inset Formula $k$
\end_inset

, there are at most 
\begin_inset Formula $dk$
\end_inset

 comparisons.
\end_layout

\begin_layout Subsection*
Analysis of arrayToHeap (implemented with heapify)
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $x$
\end_inset

 be the number of leaves in the heap.
 Then the number of nodes of height 
\begin_inset Formula $1$
\end_inset

 is 
\begin_inset Formula $\left\lceil \frac{x}{d}\right\rceil \leq\frac{x}{d}+1$
\end_inset

.
 The number of nodes of height 2 is 
\begin_inset Formula $\left\lceil \frac{\left\lceil \frac{x}{d}\right\rceil }{d}\right\rceil \leq\frac{\frac{x}{d}+1}{d}+1=\frac{x}{d^{2}}+\frac{1}{d}+1$
\end_inset

.
 Similarly the number of nodes of height 3 is not greater then 
\begin_inset Formula $\frac{x}{d^{3}}+\frac{1}{d^{2}}+\frac{1}{d}+1$
\end_inset

.
 Also, obviously 
\begin_inset Formula $x\leq n$
\end_inset

.
 It's easy to see that the number of nodes of height 
\begin_inset Formula $k$
\end_inset

 is not greater then 
\begin_inset Formula $\frac{n}{d^{k}}+2$
\end_inset

.
 From this, and from the analysis of heapifyDown, , the amount of comparisons
 done by arrayToHeap is bounded by:
\begin_inset Formula 
\begin{eqnarray*}
Comparisons & \leq & \sum_{k=1}^{h}dk\left(\frac{n}{d^{k}}+2\right)\stackrel{\mbox{*}}{\leq}\sum_{k=1}^{h}dk\cdot2\frac{n}{d^{k}}=2nd\sum_{k=1}^{h}\frac{k}{d^{k}}\leq2nd\sum_{k=0}^{\infty}\frac{k}{d^{k}}\\
 & = & 2nd\frac{d}{(d-1)^{2}}=2n\left(\frac{d}{(d-1)}\right)^{2}\leq8n=O(n)
\end{eqnarray*}

\end_inset

 Where the second transition is true for large enough 
\begin_inset Formula $n$
\end_inset

.
\begin_inset Newline newline
\end_inset

Also, 
\begin_inset Formula $\varOmega(n)$
\end_inset

 is an obvious lower bound for the comparisons made by heapify, as at least
 
\begin_inset Formula $n-1$
\end_inset

 comparisons are required to find a minimum item in an unordered list.
\begin_inset Newline newline
\end_inset

Therefore arrayToHeap executes 
\begin_inset Formula $\Theta(n)$
\end_inset

 comparisons.
\end_layout

\begin_layout Subsection*
Analysis of DHeapSort (
\begin_inset Formula $n$
\end_inset

 delete-min calls)
\end_layout

\begin_layout Standard
As each delete-min simply calls heapifyDown on the root, then from the analysis
 of heapifyDown, the number of comparisons is 
\begin_inset Formula $O(dh)=O(d(\log_{d}(n)+2))=O(d\log_{d}(n))=O(\frac{d}{\log(d)}\log(n))$
\end_inset

.
 Then the series of 
\begin_inset Formula $n$
\end_inset

 calls to delete-min are executed in 
\begin_inset Formula $O(\frac{d}{\log(d)}n\log(n))$
\end_inset

.
\color red

\begin_inset Newline newline
\end_inset


\color inherit
This bound is tight at the following example shows:
\begin_inset Newline newline
\end_inset

For simplicity, we'll assume the heap's last level is a full, and that 
\begin_inset Formula $d$
\end_inset

 is even (the idea can be adapted to other cases).
\begin_inset Newline newline
\end_inset

We are given a heap where the root has key 
\begin_inset Formula $1$
\end_inset

, and of it's 
\begin_inset Formula $d$
\end_inset

 children, the left half have key 
\begin_inset Formula $2$
\end_inset

, and the right half have the key 3.
 For every node that has key 
\begin_inset Formula $2$
\end_inset

, all it's descendants have key 
\begin_inset Formula $2$
\end_inset

, and for every node that has key 
\begin_inset Formula $3$
\end_inset

, all it's descendants have key 
\begin_inset Formula $3$
\end_inset

.
 See Figure 1 for example.
\begin_inset Newline newline
\end_inset

Given this scenario, the first half of the 
\begin_inset Formula $n$
\end_inset

 delete-min calls will make most of the 
\begin_inset Formula $3$
\end_inset

 nodes travel all the way from the root to the deepest level (to the left
 side, instead of the 
\begin_inset Formula $2$
\end_inset

 nodes).
 Therefore, for 
\begin_inset Formula $\Theta(n)$
\end_inset

 nodes, 
\begin_inset Formula $\Theta(d\log_{d}(n))$
\end_inset

 comparisons will be made.
 Therefore the bound above is tight, 
\begin_inset Formula $\Theta(\frac{d}{\log(d)}n\log(n))$
\end_inset

 comparisons will be made at the worst case.
\begin_inset Newline newline
\end_inset

The entire operation will therefore make 
\begin_inset Formula $\Theta(n)$
\end_inset

+ 
\begin_inset Formula $\Theta(\frac{d}{\log(d)}n\log(n))=\Theta(\frac{d}{\log(d)}n\log(n))$
\end_inset

 comparisons at the worst case.
\begin_inset Newline newline
\end_inset


\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
W.C.
 Heap Example
\end_layout

\end_inset


\begin_inset Graphics
	filename diagram.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Measurements Explanation
\end_layout

\begin_layout Standard
Assuming the average case has a similar run-time complexity, the measurements
 can be explained:
\begin_inset Newline newline
\end_inset

As seen in the measurements, the amount of comparisons is linearithmic (
\begin_inset Formula $n\log(n)$
\end_inset

 relation) in 
\begin_inset Formula $n$
\end_inset

, as expected.
\begin_inset Newline newline
\end_inset

The amount of comparisons appears to be lowest when 
\begin_inset Formula $d=3$
\end_inset

.
 This can be explained by examining the term 
\begin_inset Formula $\frac{d}{\log(d)}$
\end_inset

.
 Looking at the function 
\begin_inset Formula $f(x)=\frac{x}{\log(x)}$
\end_inset

, we get 
\begin_inset Formula $f'(x)=\frac{\log(x)-1}{\log^{2}(x)}$
\end_inset

.
 Therefore 
\begin_inset Formula $f'(e)=0$
\end_inset

, and it is clear that 
\begin_inset Formula $x=e$
\end_inset

 is a global minimum for 
\begin_inset Formula $x\geq1$
\end_inset

.
 So in theory, an 
\begin_inset Formula $e$
\end_inset

-heap would have the lowest amount of comparisons.
 In practice 
\begin_inset Formula $3$
\end_inset

 is the closest integer to 
\begin_inset Formula $e$
\end_inset

, so it yields the lowest amount of comparisons achievable using DHeapSort.
\end_layout

\begin_layout Section*
Part II
\end_layout

\begin_layout Subsection*
Analysis of heapifyUp
\end_layout

\begin_layout Standard
When heapifyUp is called on an item at depth 
\begin_inset Formula $k$
\end_inset

, then at most 
\begin_inset Formula $k$
\end_inset

 comparisons and swaps are performed, as the item is only compared to it's
 parent.
\end_layout

\begin_layout Subsection*
Analysis of 
\begin_inset Formula $n$
\end_inset

 Insert, Decrease-Key calls
\end_layout

\begin_layout Standard
The maximum depth of an item in the heap is 
\begin_inset Formula $h\leq\log_{d}(n)+2=O(\log_{d}(n))$
\end_inset

, and each Insert performs 
\begin_inset Formula $1$
\end_inset

 heapifyUp, therefore the amount of comparisons in 
\begin_inset Formula $n$
\end_inset

 calls to Insert is bounded by 
\begin_inset Formula $O(n\log_{d}(n))=O(\frac{n\log(n)}{\log(d)})$
\end_inset


\end_layout

\begin_layout Standard
By the exact same reasoning, 
\begin_inset Formula $n$
\end_inset

 calls to Decrease-Key are bounded by 
\begin_inset Formula $O(n\log_{d}(n))=O(\frac{n\log(n)}{\log(d)})$
\end_inset


\begin_inset Newline newline
\end_inset

The bounds are tight, as the following input shows:
\begin_inset Newline newline
\end_inset


\begin_inset Formula $n$
\end_inset

 items are inserted with the keys: 
\begin_inset Formula $2n+1,2n,2n-1,\ldots,n+1$
\end_inset

, and the Decrease-Key calls are done with 
\begin_inset Formula $delta=n+1$
\end_inset

, in the order of insertion.
 
\begin_inset Newline newline
\end_inset

At the insertion phase, each item inserted is the minimum (at that stage),
 and therefore must be heapified-up from the bottom of the heap to the root.
 At the decrease phase, each item items changes from the maximum to the
 minimum, and must be heapified-up from the bottom to the root.
\begin_inset Newline newline
\end_inset

In a heap of size 
\begin_inset Formula $n$
\end_inset

, more than 
\begin_inset Formula $\frac{n}{2}=\Theta(n)$
\end_inset

 items are leafs.
 Therefore 
\begin_inset Formula $\Theta(n)$
\end_inset

 of the operations, in both phases, will indeed cost 
\begin_inset Formula $\Theta(n\log_{d}(n))$
\end_inset

 comparisons, showing that the bound is tight.
\end_layout

\begin_layout Standard
Therefore the amount of comparisons of in the overall operation is at the
 worst case 
\begin_inset Formula $\Theta(\frac{n\log(n)}{\log(d)})$
\end_inset

.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Note: if 
\begin_inset Formula $d\geq n$
\end_inset

 then the worst case is 
\begin_inset Formula $\Theta(n)$
\end_inset

, because 
\begin_inset Formula $\varOmega(n)$
\end_inset

 is an obvious lower bound.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

Note: The TA later changed the requirement to analyze the worst case of
 a single Decrease-Key call.
 It's obvious that the W.C.
 for a single call is 
\begin_inset Formula $\Theta(\log_{d}(n))=O(\frac{\log(n)}{\log(d)})$
\end_inset

.
 We left the full analysis as it didn't seem right to delete it.
\end_layout

\begin_layout Subsection*
Measurements Explanation
\end_layout

\begin_layout Standard
Assuming the average case has a similar run-time complexity, the measurements
 show that for 
\begin_inset Formula $x=100$
\end_inset

, 
\begin_inset Formula $x=1000$
\end_inset

, the number of comparisons indeed shrinks as 
\begin_inset Formula $d$
\end_inset

 grows, as expected.
\begin_inset Newline newline
\end_inset

The lower-bound for the best case is 
\begin_inset Formula $n-1$
\end_inset

 comparisons, in the case where no item changes its position (
\begin_inset Formula $-1$
\end_inset

 because the root item never needs to be heapified-up).
 That bound is indeed achieved for the case where 
\begin_inset Formula $x=1$
\end_inset

, because if a node's key is higher than it's parent, then decreasing it
 by 
\begin_inset Formula $1$
\end_inset

 will not make them swap.
 Because the heap is built by insertions and not via arrayToHeap, then if
 a node and it's parent have the same key, then the parent must have been
 inserted earlier (because nodes are inserted to the bottom of the heap
 and are heapified-up).
 Therefore the parent's key will be decreased earlier, so there isn't a
 possibility of them swapping.
\end_layout

\end_body
\end_document
